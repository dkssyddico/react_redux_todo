{"version":3,"sources":["modules/todoReducer.js","hooks/useTheme.js","styles/GlobalStyle.js","styles/theme.js","components/AddTodoForm.js","components/TodoHeader.js","components/TodoItem.js","components/CompletedTodos.js","components/TodoList.js","components/TodoContainer.js","components/App.js","index.js"],"names":["LS_TODOS","ADD","REMOVE","EDIT","TOGGLE","todoActionCreators","text","type","id","saveTodos","todos","localStorage","setItem","JSON","stringify","todoReducer","state","action","loadTodos","getItem","parse","newTodo","uuidv4","editable","complete","added","removed","filter","todo","edited","map","toggled","LIGHT","LS_THEME","useTheme","useState","theme","setTheme","componentMounted","setComponentMounted","setMode","mode","window","useEffect","currentTheme","GlobalStyle","createGlobalStyle","lightTheme","colors","titleColor","bgColor","textColor","lightTextColor","completedTitleColor","toggleBtnBgColor","translate","toggleBtn","darkTheme","FormContainer","styled","div","Input","input","connect","dispatch","addToDo","setText","onChange","useCallback","e","value","target","onSubmit","preventDefault","trim","alert","placeholder","Header","header","Container","BtnContainer","Button","ButtonWrapper","SunIcon","MoonIcon","TitleContainer","DateContainer","DateStr","p","Day","ownProps","toggleTheme","incompleteTodos","today","Date","dateString","toLocaleDateString","day","month","year","weekday","onClick","length","CircleBtn","TodoText","RemoveBtn","Todo","li","deleteTodo","editTodo","toggleTodo","edit","setEdit","setTodo","onKeyPress","key","prevEdit","showing","setShowing","completedTodos","prevShowing","List","ul","Main","main","TodoListContainer","section","completeTodos","App","themeMode","store","createStore","composeWithDevTools","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.d246c701.chunk.js","sourcesContent":["// Ducks 패턴 사용: 액션 타입, 액션 생성 함수, 리듀서를 한 번에 관리한다.\nimport { v4 as uuidv4 } from 'uuid';\n\nconst LS_TODOS = 'todos';\n\nconst ADD = 'todo/ADD';\nconst REMOVE = 'todo/REMOVE';\nconst EDIT = 'todo/EDIT';\nconst TOGGLE = 'todo/TOGGLE';\n\nconst add = (text) => {\n  return {\n    type: ADD,\n    text,\n  };\n};\n\nconst remove = (id) => {\n  return {\n    type: REMOVE,\n    id,\n  };\n};\n\nconst edit = (id, text) => {\n  return {\n    type: EDIT,\n    id,\n    text,\n  };\n};\n\nconst toggle = (id) => {\n  return {\n    type: TOGGLE,\n    id,\n  };\n};\n\nexport const todoActionCreators = {\n  add,\n  remove,\n  edit,\n  toggle,\n};\n\nconst saveTodos = (todos) => {\n  localStorage.setItem(LS_TODOS, JSON.stringify(todos));\n  return todos;\n};\n\nconst todoReducer = (state = [], action) => {\n  const loadTodos = localStorage.getItem(LS_TODOS);\n  if (loadTodos !== null) {\n    state = JSON.parse(loadTodos);\n  }\n\n  switch (action.type) {\n    case ADD:\n      let newTodo = { text: action.text, id: uuidv4(), editable: false, complete: false };\n      const added = [newTodo, ...state];\n      return saveTodos(added);\n    case REMOVE:\n      const removed = [...state].filter((todo) => todo.id !== action.id);\n      return saveTodos(removed);\n    case EDIT:\n      const edited = [...state].map((todo) =>\n        todo.id === action.id ? { ...todo, text: action.text, editable: false } : todo\n      );\n      return saveTodos(edited);\n    case TOGGLE:\n      const toggled = [...state].map((todo) =>\n        todo.id === action.id ? { ...todo, complete: !todo.complete } : todo\n      );\n      return saveTodos(toggled);\n    default:\n      return state;\n  }\n};\n\nexport default todoReducer;\n","import { useState, useEffect } from 'react';\n\nconst LIGHT = 'light';\nconst DARK = 'dark';\nconst LS_THEME = 'theme';\n\n// 브라우저를 새로고침하거나 해도 그대로 theme mode 유지하게 하기\nfunction useTheme() {\n  const [theme, setTheme] = useState(LIGHT);\n  // 컴포넌트가 마운트되었는지 확인하는 상태\n  const [componentMounted, setComponentMounted] = useState(true);\n\n  const setMode = (mode) => {\n    window.localStorage.setItem(LS_THEME, mode);\n    setTheme(mode);\n  };\n\n  const toggleTheme = () => {\n    if (theme === LIGHT) {\n      setMode(DARK);\n    } else {\n      setMode(LIGHT);\n    }\n  };\n\n  useEffect(() => {\n    const currentTheme = window.localStorage.getItem(LS_THEME);\n    if (currentTheme) {\n      setTheme(currentTheme);\n    } else {\n      setMode(LIGHT);\n    }\n    setComponentMounted(true);\n  }, []);\n  return [theme, toggleTheme, componentMounted];\n}\n\nexport default useTheme;\n","import { createGlobalStyle } from 'styled-components';\n\nconst GlobalStyle = createGlobalStyle`\n  * {\n    box-sizing: border-box;\n  }\n  \n  body {\n    box-sizing: border-box;\n    padding-top: 30px;\n    margin:0;\n    background-color: lavender;\n    width: 100%;\n    height: 100vh;\n    font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif;\n    @media only screen and (min-width: 390px) and (max-width: 767px) { \n      padding: 0;\n    }\n  }\n\n  ul {\n    margin: 0;\n    padding: 0;\n  }\n\n  ul, li {\n    list-style: none;\n  }\n\n  input {\n    all: unset;\n  }\n  \n  p {\n    margin: 0;\n  }\n`;\n\nexport default GlobalStyle;\n","export const lightTheme = {\n  id: 'light',\n  colors: {\n    titleColor: '#00C9A7',\n    bgColor: '#fff',\n    textColor: '#495057',\n    lightTextColor: '#8892B0',\n    completedTitleColor: '#000',\n    toggleBtnBgColor: '#0A192F',\n  },\n  translate: {\n    toggleBtn: `0px`,\n  },\n};\n\nexport const darkTheme = {\n  id: 'dark',\n  colors: {\n    titleColor: '#64FFDA',\n    bgColor: '#0A192F',\n    textColor: '#CCD6F6',\n    lightTextColor: '#8892B0',\n    completedTitleColor: '#64FFDA',\n    toggleBtnBgColor: '#495057',\n  },\n  translate: {\n    toggleBtn: `30px`,\n  },\n};\n","import React, { useState, useCallback } from 'react';\nimport { connect } from 'react-redux';\nimport styled from 'styled-components';\nimport { todoActionCreators } from '../modules/todoReducer';\n\nconst FormContainer = styled.div`\n  margin-top: 10px;\n`;\n\nconst Input = styled.input`\n  width: 100%;\n  font-size: 18px;\n  color: ${({ theme }) => theme.colors.lightTextColor};\n  &::placeholder {\n    color: ${({ theme }) => theme.colors.lightTextColor};\n  }\n`;\n\nconst AddTodoForm = ({ addToDo }) => {\n  const [text, setText] = useState('');\n\n  const onSubmit = (e) => {\n    e.preventDefault();\n    if (text.trim() === '') {\n      alert('내용을 입력해주세요!');\n    } else {\n      addToDo(text);\n      setText('');\n    }\n  };\n\n  const onChange = useCallback((e) => {\n    const { value } = e.target;\n    setText(value);\n  }, []);\n\n  return (\n    <FormContainer>\n      <form onSubmit={onSubmit}>\n        <Input type='text' value={text} onChange={onChange} placeholder='할 일을 입력해주세요.' />\n        {/* <button>Submit</button> */}\n      </form>\n    </FormContainer>\n  );\n};\n\nconst mapDispatchToProps = (dispatch) => {\n  return { addToDo: (text) => dispatch(todoActionCreators.add(text)) };\n};\n\nexport default connect(null, mapDispatchToProps)(AddTodoForm);\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport { FaSun } from 'react-icons/fa';\nimport { BsMoonStarsFill } from 'react-icons/bs';\nimport styled from 'styled-components';\n\nconst Header = styled.header`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n`;\n\nconst Container = styled.div`\n  width: 100%;\n  display: flex;\n  justify-content: space-between;\n`;\n\nconst BtnContainer = styled.div`\n  /* align-self: flex-end; */\n`;\n\nconst Button = styled.div`\n  width: 60px;\n  height: 30px;\n  background-color: ${({ theme }) => theme.colors.toggleBtnBgColor};\n  border-radius: 30px;\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  padding: 0 6px;\n  cursor: pointer;\n  display: flex;\n  position: relative;\n`;\n\nconst ButtonWrapper = styled.div`\n  position: absolute;\n  height: 20px;\n  width: 20px;\n  border-radius: 50%;\n  background-color: #fff;\n  transition: transform 0.5s, background-color 0.5s;\n  will-change: transform;\n  transform: translateX(\n    calc(\n      ${({ theme }) => {\n        return theme.translate.toggleBtn;\n      }}\n    )\n  );\n`;\n\nconst SunIcon = styled.div`\n  width: 16px;\n  height: 16px;\n  color: yellow;\n`;\nconst MoonIcon = styled.div`\n  width: 16px;\n  height: 16px;\n  color: yellow;\n`;\n\nconst TitleContainer = styled.div`\n  width: 100%;\n  display: flex;\n  justify-content: space-between;\n  align-items: flex-end;\n  color: ${({ theme }) => theme.colors.titleColor};\n  margin-bottom: 15px;\n  h1 {\n    margin: 0;\n  }\n  div {\n    font-size: 32px;\n  }\n`;\n\nconst DateContainer = styled.div`\n  font-size: 24px;\n  font-weight: 500;\n  margin-bottom: 20px;\n  display: flex;\n  color: ${({ theme }) => theme.colors.textColor};\n  @media only screen and (min-width: 390px) and (max-width: 767px) {\n    flex-direction: column;\n  }\n`;\n\nconst DateStr = styled.p`\n  margin-right: 10px;\n`;\n\nconst Day = styled.p`\n  color: ${({ theme }) => theme.colors.lightTextColor};\n`;\n\nfunction TodoHeader({ todos, toggleTheme }) {\n  const incompleteTodos = todos.filter((todo) => todo.complete === false);\n  const today = new Date();\n  const dateString = today.toLocaleDateString('ko-KR', {\n    day: 'numeric',\n    month: 'long',\n    year: 'numeric',\n  });\n  const day = today.toLocaleDateString('ko-KR', {\n    weekday: 'long',\n  });\n\n  return (\n    <Header>\n      <Container>\n        <DateContainer>\n          <DateStr>{dateString}</DateStr>\n          <Day>{day}</Day>\n        </DateContainer>\n        <BtnContainer>\n          <Button onClick={toggleTheme}>\n            <ButtonWrapper></ButtonWrapper>\n            <SunIcon>\n              <FaSun />\n            </SunIcon>\n            <MoonIcon>\n              <BsMoonStarsFill />\n            </MoonIcon>\n          </Button>\n        </BtnContainer>\n      </Container>\n      <TitleContainer>\n        <h1>오늘 뭐하지?</h1>\n        <div>{incompleteTodos.length}</div>\n      </TitleContainer>\n    </Header>\n  );\n}\n\nconst mapStateToProps = (state, ownProps) => {\n  return { todos: state };\n};\n\nexport default connect(mapStateToProps, null)(TodoHeader);\n","import React, { useState } from 'react';\nimport { connect } from 'react-redux';\nimport styled from 'styled-components';\nimport { MdDone } from 'react-icons/md';\nimport { HiTrash } from 'react-icons/hi';\n\nimport { todoActionCreators } from '../modules/todoReducer';\n\nconst CircleBtn = styled.div`\n  flex-basis: 1;\n  all: unset;\n  margin: 0;\n  margin-right: 8px;\n  cursor: pointer;\n  width: 18px;\n  height: 18px;\n  border: 2px solid ${({ theme }) => theme.colors.titleColor};\n  color: ${({ theme }) => theme.colors.titleColor};\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  border-radius: 50%;\n  font-size: 16px;\n  font-weight: 600;\n`;\n\nconst TodoText = styled.div`\n  width: 100%;\n  flex: 1;\n  font-size: 21px;\n  color: ${({ theme }) => theme.colors.textColor};\n  word-break: break-all;\n`;\n\nconst RemoveBtn = styled.div`\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  color: #dee2e6;\n  font-size: 24px;\n  cursor: pointer;\n  &:hover {\n    color: #ff6b6b;\n  }\n  opacity: 0;\n  transition: all 0.5s ease-in-out;\n`;\n\nconst Input = styled.input`\n  width: 100%;\n  flex: 1;\n  font-size: 21px;\n  color: ${({ theme }) => theme.colors.textColor};\n`;\n\nconst Todo = styled.li`\n  width: 100%;\n  height: 100%;\n  display: flex;\n  align-items: center;\n  margin-bottom: 10px;\n  &:hover {\n    ${RemoveBtn} {\n      opacity: 1;\n    }\n  }\n`;\n\nconst TodoItem = ({ text, editable, complete, editTodo, toggleTodo, deleteTodo }) => {\n  const [edit, setEdit] = useState(editable);\n  const [todo, setTodo] = useState(text);\n\n  const onTextClick = () => {\n    setEdit((prevEdit) => !prevEdit);\n  };\n\n  const onDeleteClick = () => {\n    deleteTodo();\n  };\n\n  const onToggleClick = () => {\n    toggleTodo();\n  };\n\n  const onChange = (e) => {\n    setTodo(e.target.value);\n  };\n\n  const onEnterPress = (e) => {\n    const { key } = e;\n    if (key === 'Enter') {\n      editTodo(todo);\n      setEdit((prevEdit) => !prevEdit);\n    }\n  };\n\n  return (\n    <Todo>\n      <CircleBtn onClick={onToggleClick}>{complete ? <MdDone /> : ''}</CircleBtn>\n      {edit ? (\n        <>\n          <Input onChange={onChange} onKeyPress={onEnterPress} value={todo} />\n        </>\n      ) : (\n        <>\n          <TodoText onClick={onTextClick}>{todo}</TodoText>\n        </>\n      )}\n      <RemoveBtn onClick={onDeleteClick}>\n        <HiTrash />\n      </RemoveBtn>\n    </Todo>\n  );\n};\n\nconst mapDispatchToProps = (dispatch, ownProps) => {\n  const { id } = ownProps;\n  return {\n    deleteTodo: () => dispatch(todoActionCreators.remove(id)),\n    editTodo: (text) => dispatch(todoActionCreators.edit(id, text)),\n    toggleTodo: () => dispatch(todoActionCreators.toggle(id)),\n  };\n};\n\nexport default connect(null, mapDispatchToProps)(TodoItem);\n","import React, { useState } from 'react';\nimport { connect } from 'react-redux';\nimport styled from 'styled-components';\nimport TodoItem from './TodoItem';\n\nconst TitleContainer = styled.div`\n  display: flex;\n  justify-content: space-between;\n  align-items: flex-end;\n  margin-bottom: 12px;\n\n  h2 {\n    margin: 0;\n    font-size: 16px;\n    color: ${({ theme }) => theme.colors.completedTitleColor};\n  }\n\n  button {\n    all: unset;\n    cursor: pointer;\n    color: #9e9e9e;\n    font-size: 14px;\n  }\n`;\n\nconst CompletedTodos = ({ todos }) => {\n  const [showing, setShowing] = useState(false);\n  const completedTodos = todos.filter((todo) => todo.complete === true);\n  const onClick = () => {\n    setShowing((prevShowing) => !prevShowing);\n  };\n\n  return (\n    <div>\n      <TitleContainer>\n        <h2>{completedTodos.length}개의 완료한 항목</h2>\n        <button onClick={onClick}>{showing ? '가리기' : '보기'}</button>\n      </TitleContainer>\n      {showing ? (\n        <ul>\n          {todos.map((todo) => todo.complete === true && <TodoItem key={todo.id} {...todo} />)}\n        </ul>\n      ) : (\n        ''\n      )}\n    </div>\n  );\n};\n\nconst mapStateToProps = (state, ownProps) => {\n  return { todos: state };\n};\n\nexport default connect(mapStateToProps, null)(CompletedTodos);\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport styled from 'styled-components';\nimport TodoItem from './TodoItem';\n\nconst List = styled.ul`\n  height: 300px;\n  overflow-y: scroll;\n`;\n\nfunction TodoList({ todos }) {\n  const incompleteTodos = todos.filter((todo) => todo.complete === false);\n  return (\n    <List>\n      <ul>\n        {incompleteTodos.map(\n          (todo) => todo.complete === false && <TodoItem key={todo.id} {...todo} />\n        )}\n      </ul>\n    </List>\n  );\n}\n\nconst mapStateToProps = (state, ownProps) => {\n  return { todos: state };\n};\n\nexport default connect(mapStateToProps, null)(TodoList);\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport AddTodoForm from './AddTodoForm';\nimport TodoHeader from './TodoHeader';\nimport CompletedTodos from './CompletedTodos';\nimport TodoList from './TodoList';\nimport styled from 'styled-components';\n\nconst Main = styled.main`\n  width: 512px;\n  height: 500px;\n  margin: 0 auto;\n  padding: 30px 45px;\n  border-radius: 16px;\n  background-color: ${({ theme }) => theme.colors.bgColor};\n  @media only screen and (min-width: 390px) and (max-width: 767px) {\n    width: 390px;\n    height: 100vh;\n  }\n`;\n\nconst TodoListContainer = styled.section`\n  margin-top: 20px;\n  height: 270px;\n  overflow-y: scroll;\n  h1 {\n    color: ${({ theme }) => theme.colors.textColor};\n  }\n`;\n\nfunction TodoContainer({ todos, theme, toggleTheme }) {\n  const completeTodos = todos.filter((todo) => todo.complete === true);\n  return (\n    <Main>\n      <TodoHeader theme={theme} toggleTheme={toggleTheme} />\n      <AddTodoForm />\n      <TodoListContainer>\n        {completeTodos.length > 0 && <CompletedTodos />}\n        {todos.length > 0 ? <TodoList /> : <h1>할 일을 추가해주세요.</h1>}\n      </TodoListContainer>\n    </Main>\n  );\n}\n\nconst mapStateToProps = (state) => {\n  return { todos: state };\n};\n\nexport default connect(mapStateToProps, null)(TodoContainer);\n","import React from 'react';\nimport { ThemeProvider } from 'styled-components';\nimport useTheme from '../hooks/useTheme';\nimport GlobalStyle from '../styles/GlobalStyle';\nimport { lightTheme, darkTheme } from '../styles/theme';\nimport TodoContainer from './TodoContainer';\n\nfunction App() {\n  const [theme, toggleTheme, componentMounted] = useTheme();\n  const themeMode = theme === 'light' ? lightTheme : darkTheme;\n\n  if (!componentMounted) {\n    return <div>Wait loading</div>;\n  }\n\n  return (\n    <>\n      <ThemeProvider theme={themeMode}>\n        <GlobalStyle />\n        <TodoContainer theme={theme} toggleTheme={toggleTheme} />\n      </ThemeProvider>\n    </>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { createStore } from 'redux';\nimport { Provider } from 'react-redux';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport todoReducer from './modules/todoReducer';\nimport App from './components/App';\n\nconst store = createStore(todoReducer, composeWithDevTools());\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}